package engine.model.activity.weekly.activity;

import engine.model.Model;
import engine.model.boat.Boat;
import engine.xml.adapter.LocalTimeAdapter;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.io.Serializable;
import java.time.LocalTime;
import java.util.Objects;

@XmlRootElement(name = "WeeklyActivity")
@XmlAccessorType(XmlAccessType.FIELD)
public class WeeklyActivity extends Model implements Serializable {

    private String name;
    @XmlJavaTypeAdapter(LocalTimeAdapter.class)
    private LocalTime startTime;
    @XmlJavaTypeAdapter(LocalTimeAdapter.class)
    private LocalTime endTime;
    private Boat.eBoatType boatType = null;
    private boolean isAutoGenerated = false;


    public WeeklyActivity() {

    }

    public WeeklyActivity(String name, LocalTime startTime, LocalTime endTime, Boat.eBoatType boatType) {
        this(name, startTime, endTime);

        if (boatType != null) {
            this.boatType = boatType;
        }
    }

    public WeeklyActivity(String name, LocalTime startTime, LocalTime endTime) {
        this.name = name;
        this.startTime = startTime;
        this.endTime = endTime;

        if (name.equalsIgnoreCase("Auto Generated")) {
            this.isAutoGenerated = true;
        }
    }

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }

    public String getName() {
        return this.name;
    }

    void setName(String name) {
        this.name = name;
    }

    public LocalTime getStartTime() {
        return this.startTime;
    }

    void setStartTime(LocalTime startTime) {
        this.startTime = startTime;
    }

    public Boat.eBoatType getBoatType() {
        return boatType;
    }

    void setBoatType(Boat.eBoatType boatType) {
        this.boatType = boatType;
    }

    public LocalTime getEndTime() {
        return this.endTime;
    }

    void setEndTime(LocalTime endTime) {
        this.endTime = endTime;
    }

    public WeeklyActivity cloneWeeklyActivity() {
        WeeklyActivity result = new WeeklyActivity(this.name, this.startTime, this.endTime, this.boatType);
        result.isAutoGenerated = this.isAutoGenerated;
        return result;
    }

    public boolean isOverlapping(WeeklyActivity toCheck){
        if(toCheck == null){
            return false;
        }

        boolean cond1 = toCheck.startTime.isAfter(this.startTime) && toCheck.endTime.isBefore(this.endTime);
        boolean cond2 = toCheck.endTime.isAfter(this.startTime) && toCheck.endTime.isBefore(this.endTime);
        boolean cond3 = toCheck.startTime.isAfter(this.startTime) && toCheck.startTime.isBefore(this.endTime);
        boolean cond4 = toCheck.startTime.isBefore(this.startTime) && toCheck.endTime.isAfter(this.endTime);
        boolean cond5 = toCheck.startTime.equals(this.startTime) || toCheck.endTime.equals(this.endTime);

        return cond1 || cond2 || cond3 || cond4 || cond5;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        if (super.equals(o))
            return true;
        WeeklyActivity that = (WeeklyActivity) o;
        return name.equals(that.name) &&
                startTime.equals(that.startTime) &&
                endTime.equals(that.endTime) &&
                boatType == that.boatType;
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, startTime, endTime, boatType);
    }
}
